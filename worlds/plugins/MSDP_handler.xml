<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Wednesday, April 27, 2016, 11:41 AM -->
<!-- MuClient version 5.01 -->

<!-- Plugin "MSDP_handler" generated by Plugin Wizard -->

<muclient>
<plugin
   name="MSDP_handler"
   author="Anton Gorev"
   id="0cca324658121f0704191069"
   language="Lua"
   purpose="Support of MSDP protocol"
   date_written="2016-04-27 11:40:50"
   requires="4.94"
   version="1.0"
   >

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Script  -->

<aliases>
   <alias script="msdpdebug" match="^msdpdebug (.*)$" enabled="y" regexp="y" send_to="12" sequence="100"></alias>
   <alias script="msdpdebug" match="^msdpdebug$" enabled="y" regexp="y" send_to="12" sequence="100"></alias>
</aliases>

<script>
<![CDATA[

require "serialize"
utils = require "common_utils"

local NUL, IAC, SB, SE, DO = 0x00, 0xFF, 0xFA, 0xF0, 0xFD

local MSDP = 69

local MSDP_VAR = 1
local MSDP_VAL = 2

local MSDP_TABLE_OPEN = 3
local MSDP_TABLE_CLOSE = 4

local MSDP_ARRAY_OPEN = 5
local MSDP_ARRAY_CLOSE = 6

local SPECIAL_CHARS = string.char(NUL) .. string.char(MSDP_VAL) .. string.char(MSDP_VAR) .. string.char(MSDP_TABLE_OPEN) .. string.char(MSDP_TABLE_CLOSE) .. string.char(MSDP_ARRAY_OPEN) .. string.char(MSDP_ARRAY_CLOSE)

local MSDPDebug = tonumber(GetVariable("MSDPDebug")) or 0

function msdpdebug(name, line, wildcards)
   newval = tonumber(wildcards[1])
   if not newval or newval > 2 or newval < 0 then
      ColourNote("darkorange", "", "Usage: msdpdebug {0|1|2}")
      ColourNote("darkorange", "", "   0 - off")
      ColourNote("darkorange", "", "   1 - simple")
      ColourNote("darkorange", "", "   2 - verbose")
      return
   end
   MSDPDebug = newval
   local msg = "off"
   if MSDPDebug == 1 then
      msg = "simple"
   elseif MSDPDebug == 2 then
      msg = "verbose"
   end
   ColourNote ("darkorange", "", "MSDPDebug: " .. msg)
end

---------------------------------------------------------------------------------------------------
-- Mushclient callback function when telnet SB data received.
---------------------------------------------------------------------------------------------------
function OnPluginTelnetSubnegotiation (msg_type, data)
   if msg_type ~= MSDP then
      return
   end -- if not MSDP
  
   if MSDPDebug > 0 then
      dumpmsdp(data)
   end

   request = parse_MSDP_request(data)
   if nil == request then
      Note("Failed to parse MSDP request.")
      return
   end

   if nil ~= request.ROOM then
      BroadcastPlugin(1, serialize.save("room", request.ROOM))
   end
end -- function OnPluginTelnetSubnegotiation

function OnPluginInstall()
   BroadcastPlugin(1, "reload") -- reload basically tells other plugins "clear all your msdp data"
   if IsConnected() then
      -- pretend like we just logged in
      OnPluginConnect()
   end
end

function OnPluginSaveState()
   SetVariable("MSDPDebug", MSDPDebug)
end

function OnPluginTelnetRequest (msg_type, data)
   if msg_type == MSDP and data == "WILL" then
      return true
   end -- if
  
   if msg_type == MSDP and data == "SENT_DO" then
      Note ("Enabling MSDP.") 
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'ROOM')
      return true
   end

   return false
end -- function OnPluginTelnetRequest

function OnPluginDisable()
   EnablePlugin(GetPluginID(), true)
   ColourNote("white", "blue", "You are not allowed to disable the "..
   GetPluginInfo(GetPluginID(), 1).." plugin. It is necessary for other plugins.")
end

local function getmemoryusage()
   collectgarbage('collect')
   return collectgarbage('count')
end

function dumpmsdp(data)
   data = data or ""
   data = string.gsub(
      string.gsub(
         string.gsub(
            string.gsub(
               string.gsub(
                  string.gsub(data, string.char(MSDP_VAR), "<MSDP_VAR>"),
                  string.char(MSDP_VAL), "<MSDP_VAL>"),
               string.char(MSDP_TABLE_OPEN), "<MSDP_TABLE_OPEN>"),
            string.char(MSDP_TABLE_CLOSE), "<MSDP_TABLE_CLOSE>"),
         string.char(MSDP_ARRAY_OPEN), "<MSDP_ARRAY_OPEN>"),
      string.char(MSDP_ARRAY_CLOSE), "<MSDP_ARRAY_CLOSE>")
   ColourNote("darkorange", "", data)
end

function Send_MSDP_Packet (what)
   assert (what, "Send_MSDP_Packet passed a nil message.")
   local i = string.find(what, SPECIAL_CHARS)
   if i ~= nil then
      ColourNote("white", "blue", "WARNING: MSDP packet contains prohibited characters: "..utils.strjoin(utils.get_chars(what), ", "))
   end

   SendPkt (string.char (IAC, SB, MSDP) .. 
            what ..
            string.char (IAC, SE))
end -- Send_MSDP_Packet

function parse_MSDP_request(data)
   local request = {}
   
   local parse_MSDP_variable
   local parse_MSDP_value
   
   local function ParserError(message)
      Note(message)
   end
   
   local function parse_MSDP_array(arg)
      local result = {}
      
      repeat
         local item = parse_MSDP_variable(arg)
         if nil == item then
            return nil
         end
         table.insert(result, item)
      until MSDP_ARRAY_CLOSE == data:byte(arg.from, arg.from)
      
      return result
   end
   
   local function parse_MSDP_table(arg)
      local result = {}
      
      repeat
         local item = parse_MSDP_variable(arg)
         if nil == item then
            return nil
         end
         for k, v in pairs(item) do
            result[k] = v
         end
      until MSDP_TABLE_CLOSE == data:byte(arg.from, arg.from)
      
      return result
   end
   
   function parse_MSDP_value(arg)
      local data = arg.data
      local pos = arg.from

      if pos > data:len() then
         ParserError("MSDP value too small")
         return nil
      end

      if MSDP_TABLE_OPEN == data:byte(pos, pos) then
         local a = {data = data, from = 1 + pos}
         result = parse_MSDP_table(a)
         pos = a.from
      elseif MSDP_ARRAY_OPEN == data:byte(pos, pos) then
         local a = {data = data, from = 1 + pos}
         result = parse_MSDP_array(a)
         pos = a.from
      else
         local s = ""
         while pos <= data:len() do
            local c = data:sub(pos, pos)
            
            if MSDP_ARRAY_CLOSE == data:byte(pos, pos) or MSDP_TABLE_CLOSE == data:byte(pos, pos) or MSDP_VAL == data:byte(pos, pos) or MSDP_VAR == data:byte(pos, pos)then
               break
            elseif nil ~= string.find(SPECIAL_CHARS, c) then
               ParserError("MSDP value contains special characters.")
               return nil
            else
               s = s .. c
            end
            
            pos = pos + 1
         end
         
         if pos > data:len() then
            ParserError("MSDP value too small")
            return nil
         end
         
         result = s
      end
      
      arg.from = pos
      return result
   end
   
   function parse_MSDP_variable(arg)
      local data = arg.data
      local pos = arg.from
      local result = {}
      
      if 1 >= data:len() then
         ParserError("Value too small")
         return nil
      end
      
      if data:byte(pos, pos) ~= MSDP_VAR then
         ParserError("MSDP variable does not start from MSDP_VAR. Current character is " .. string.format("\\x%02x", data:byte(pos, pos)))
         return nil
      end
      
      local name, value = "", nil
      
      pos = 1 + pos
      while pos <= data:len() do
         local c = data:sub(pos, pos)
         if string.char(MSDP_VAL) == c then
            local a = {data = data, from = 1 + pos}
            value = parse_MSDP_value(a)
            pos = a.from
            break
         elseif nil ~= string.find(SPECIAL_CHARS, c) then
            ParserError("MSDP variable name contains special characters.")
            return nil
         else
            name = name .. c
         end
         pos = pos + 1
      end
      
      if nil == name or nil == value then
         ParserError("Variable name and variable value are both nil.")
         return nil
      end
      
      if arg.from == data:len() then
         ParserError("Unexpected end of value")
         return nil
      end
      
      arg.from = pos
      result[name] = value
      return result
   end

   return parse_MSDP_variable({data = data, from = 1})
end

]]>
</script>


</muclient>

<!-- vim: set ai ts=3 sw=3 tw=0 et syntax=lua :-->
