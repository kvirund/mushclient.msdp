<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on воскресенье, Май 01, 2016, 2:09  -->
<!-- MuClient version 4.94 -->

<!-- Plugin "MSDP_mapper" generated by Plugin Wizard -->

<muclient>
<plugin
   name="MSDP_mapper"
   author="Anton Gorev"
   id="3fbda14f0cfc0bda5f0ecfef"
   language="Lua"
   purpose="Handling info from MSDP_handler.xml"
   date_written="2016-05-01 14:09:14"
   requires="4.94"
   version="1.0"
   >

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Script  -->


<script>
<![CDATA[

require "serialize"
require "mapper"

local rooms = {}
local current_room_vnum = nil

function sanitize_filename(str)
   str = string.gsub(str, "[^%w%s()_-]", "_")
   return Trim(str)
end

insert_area_statement = ""
insert_room_statement = ""
insert_note_statement = ""

function open_database()
	db = assert(sqlite3.open(GetInfo(66) .. sanitize_filename(WorldName()) .. ".sqlite"))
	db:exec([[
CREATE TABLE IF NOT EXISTS [areas] (
	[id] INTEGER PRIMARY KEY,                                -- Area ID
	[name] TEXT NOT NULL,                                    -- Area Name
	[timestamp] TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP -- Timestamp of area insertion
);]])
	db:exec([[
CREATE TABLE IF NOT EXISTS [rooms] (
	[id] INTEGER PRIMARY KEY,                                -- Room's VNUM
	[aid]	INTEGER REFERENCES [areas] ([id]),                 -- Area ID. For Bylins it is VNUM / 100
	[terrain] TEXT DEFAULT "Unknown",                        -- Room terrain
	[east] INTEGER,                                          -- VNUM of exit to the east or NULL
	[west] INTEGER,                                          -- VNUM of exit to the west or NULL
	[north] INTEGER,                                         -- VNUM of exit to the north or NULL
	[south] INTEGER,                                         -- VNUM of exit to the south or NULL
	[up] INTEGER,                                            -- VNUM of exit to the up or NULL
	[down] INTEGER,                                          -- VNUM of exit to the down or NULL
	[timestamp] TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP -- Timestamp of room insertion
);]])
	db:exec([[
CREATE TABLE IF NOT EXISTS [notes] (
	[id] INTEGER PRIMARY KEY AUTOINCREMENT,                  -- Note ID
	[rid] INTEGER REFERENCES [rooms] ([id]),                 -- Room ID this note belongs to
	[note] TEXT NOT NULL,                                    -- Note contents
	[timestamp] TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP -- Timestamp of note insertion
);
	]])
	insert_area_statement = db:prepare("INSERT OR REPLACE INTO [areas] ([id], [name]) VALUES (?, ?)")
	insert_room_statement = db:prepare("INSERT OR REPLACE INTO [rooms] ([id], [aid], [terrain], [east], [west], [north], [south], [up], [down]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)")
	insert_note_statement = db:prepare("INSERT OR REPLACE INTO [notes] ([id], [rid], [note]) VALUES (?, ?, ?)")
	if nil == insert_area_statement then
		Note("Insert statement for [areas] is nil")
	end
	if nil == insert_room_statement then
		Note("Insert statement for [rooms] is nil")
	end
	if nil == insert_note_statement then
		Note("Insert statement for [notes] is nil")
	end
	Note("Statements are prepared")
end

function add_room(room)
	insert_area_statement:bind(1, room.ZONE)
	insert_area_statement:bind(2, room.AREA)
	local result = insert_area_statement:step()
	if sqlite3.DONE ~= result then
		Note("Error while inserting new area: " .. serialize.save("result", result) .. "\n" .. db:errmsg())
	end
	insert_area_statement:reset()

	insert_room_statement:bind(1, room.VNUM)
	insert_room_statement:bind(2, room.ZONE)
	insert_room_statement:bind(3, room.TERRAIN)
	insert_room_statement:bind(4, room.EXITS.e)
	insert_room_statement:bind(5, room.EXITS.w)
	insert_room_statement:bind(6, room.EXITS.n)
	insert_room_statement:bind(7, room.EXITS.s)
	insert_room_statement:bind(8, room.EXITS.u)
	insert_room_statement:bind(9, room.EXITS.d)
	result = insert_room_statement:step()
	if sqlite3.DONE ~= result then
		Note("Error while inserting new room: " .. serialize.save("result", result) .. "\n" .. db:errmsg())
	end
	insert_room_statement:reset()
end

function load_rooms()
	open_database()
	for row in db:nrows([=[SELECT r.*, a.name area FROM [rooms] r, [areas] a WHERE r.[aid]=a.[id]]=]) do
		rooms[row.id] = {
			fillbrush = 1,
			fillcolour = 0x000000,
			borderpenwidth = 1,
			borderpen = 0,
			hovermessage = row.name,
			bordercolour = 0xffffff,
			name = row.name,
			exits = {e = row.east, w = row.west, n = row.north, s = row.south, u = row.up, d = row.down},
			area = row.area,
			terrain = row.terrain
		}
	end
end

function get_room(uid)
	if nil == rooms[uid] then
		return nil
	end

	local room = {}
	for k, v in pairs(rooms[uid]) do		-- shallow copy of room
		room[k] = v
	end

	if current_room_vnum == uid then
		room.fillbrush = 0
		room.fillcolour = 0x008800
		room.bordercolour = 0x000000
	end

	return room
end

function OnHelp(name, line, wildcards)
end

function room_click(uid, flags)
end

function OnPluginInstall()
	local config = {}

	load_rooms()

   fonts = utils.getfontfamilies ()
   -- if not there already, add it
   if not fonts.Dina then
      AddFont (GetInfo (66) .. "\\Dina.fon")
   end -- if Dina not installed

	-- initialize mapper engine
	mapper.init { config = config, get_room = get_room }
	mapper.mapprint(string.format("MUSHclient mapper installed, version %0.1f", mapper.VERSION))
end

function OnPluginBroadcast(msg, id, name, text)
	if "0cca324658121f0704191069" == id then
		if 1 == msg then
			loadstring(text) ()
			if nil == room then
				Note("room is nil")
				return
			end
			add_room(room)
			local exits = {}
			local VNUM = tonumber(room.VNUM)
			if rooms[VNUM] then
				exits = rooms[VNUM].EXITS or {}
			end
			for k, v in pairs(room.EXITS) do
				exits[k] = tonumber(v)
			end
			local mapper_room = {
				fillbrush = 1,
				fillcolour = 0,
				borderpenwidth = 1,
				borderpen = 0,
				hovermessage = room.NAME,
				bordercolour = 0xffffff,
				name = room.NAME,
				exits = exits,
				area = room.AREA,
				terrain = room.TERRAIN
			}
			rooms[VNUM] = mapper_room
			current_room_vnum = VNUM
			mapper.draw(VNUM)
		end
	end
end

]]>
</script>

</muclient>

<!-- vim: set ts=3 sw=3 tw=0 noet syntax=lua :-->
